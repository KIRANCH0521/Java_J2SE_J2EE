For installing server 
1. 9090 -- http port and  4848 --- admin console
2. user name --admin & password blank
3. Run Oracle glassfish installer (JDK is java 7)
4 For downloading its indigo plugin ---from net
Add new server---download additional adapter & chose Oracle glassfish server tools .(I have already supplied eclipse_glassfish.rar --- so skip this step)
5. Run external server & test using IE8 -- should show admin console properly.
6.Stop external server.
7. Start IDE , Then add server & deploy test_web. 

Hot deployment folder for Glassfish --- <glassfish-install>\glassfish\domains\domain1\autodeploy

where is server log file?  <glassfish-install>\glassfish\domains\domain1\logs\server.log

If server doesn't start up properly or doesn't get added in eclipse IDE then 
Try this
0. Check if its a firewall issue--- disable firewall
1. Stop anti-virus scanner
2. Check port if its blocked by any other process
3. Check server.log from  D:\glassfish3\glassfish\domains\domain1\logs --- see any specific error.
4. netstat -a -n -o | find "8080"

   1. In the far right column, you'll see a process identifier.
   2. Bring up the windows task manager (hit ctrl+alt+delete and select "Start Task Manager") and go to the processes tab.
   3. Look for the column named "PID" (if it is not present already go to view -> select columns... -> check PID) and find the process with the PID you found using netstat.
      -> kill the process -> try again.

5. In worst case , disable net & then launch server again.

Note : Glassfish install dir is -- D:\glassfish3

For listing applications deployed on Glassfish --From <glassfish-install>\glassfish>\bin run ---
asadmin list-applications


Note for porting existing project 
1. Not having any db connectivity --- 
Simply create war file(using IDE or w/o IDE --- even  can choose tomcat as server) & copy that .war file under auto-deploy folder(<glassfish-install>\glassfish\domains\domain1\autodeploy)

2. For any DB related applns --- steps 
Add JDBC  driver JARs in --- D:\glassfish3\glassfish\domains\domain1\lib\ext.

3. For porting --- struts-hibernate project(developed on Tomcat) to Glassfish

3.1.Copy all (stuts & hibernate required) jars under <web-inf>/lib & then only run it on glassfish.
3.2.Copy hibernate3.dtd, struts2.dtd -- under <Glassfish-install>\glassfish\domains\domain1\config

4.For JPA or JDBC ---typically nobody uses fixed connectivity under appln server.
So create Connection Pool(similar to the created on Tomcat server)
4.1 Scripts for MySQL
From <glassfish-install>\glassfish>\bin run ---

4.1.1 
For creating conn pool.

asadmin create-jdbc-connection-pool --datasourceclassname com.mysql.jdbc.jdbc2.optional.MysqlConnectionPoolDataSource --restype javax.sql.DataSource --property "User=root:Password=root:URL=jdbc\:mysql\://localhost\:3306/testjdbc" jdbc/mysql


4.1.2 For verifying status of conn pool

asadmin ping-connection-pool jdbc/mysql

4.1.3  For creating Data source

asadmin create-jdbc-resource --connectionpoolid jdbc/mysql jdbc/mysql_ds

4.2 Scripts for Oracle

4.2.1 asadmin create-jdbc-connection-pool --datasourceclassname oracle.jdbc.pool.OracleDataSource --restype javax.sql.DataSource --property "User=scott:Password=tiger:URL=jdbc\:oracle\:thin\:@localhost\:1521\:orcl" jdbc/ora

4.2.2 Verify the connection pool as:
asadmin ping-connection-pool jdbc/ora

4.2.3  To create JDBC data source
asadmin create-jdbc-resource --connectionpoolid jdbc/ora my_ora_ds

5. JPA based Entities + Session Beans Facade

5.1 Create EJB project with run-time as Glassfish.
5.2 From project properties  change Project facet to JPA (add JPA facet & use additional configuration)
5.3 Reverse engineer any POJO(entity) from existing DB table.
5.4 Ensure that persistence.xml is created under <meta-inf> ---

5.5 In persistence.xml ---  add <jta-data-source> as JNDI name of the data source created.

5.6 Create B.I (POJI) for SLSB or SFSB facade .(CRUD method declaration)

5.7 Create SLSB/SFSB POJO --- Inject PersistenceContext (using persistence unit name)
into EntityManager(Similar to Hibernate session) 
JPQL syntax change ---eg -- select e from MyEMP e
& list replaced by getResultList

This SLSB or SFSB now acts as DAO layer.

5.8
5.8 
Create web project as client , from JSP or servlet ---perform Initial ctx.lookup(or DI) ---
invoke CRUD methods of SLSB/SFSB DAO & get results.

5.9 Create Enterprise Application project (EAR) -- add ejb module & web projcet module to it (while creating itself).

5.10 Export EAR project --- as .ear file.
(Known Bug -- EAR project can be deployed from eclipse glassfish tools --so have to deploy it either from admin console or asadmin commands)

6. To list deployed applications
asadmin list-applications

7. To un-deploy any existing applications (same cmd for .war,.jar,.ear)
asadmin undeploy test_ear

8. To deploy (same cmd for .war,.jar,.ear)
asadmin deploy g:\test_ear.ear

9. From Eclipse IDE ---run ejb clnts project (Confirm that under configured modules -- it shows EAR project name) & launch jsp/servlet clnt & test the same.

10
Setting up of JMS on Glassfish server console
1. Create JMS resource (Connection factory)
asadmin create-jms-resource --restype javax.jms.ConnectionFactory --description "connection factory for durable subscriptions" jms/my_factory

2. Create JMS resource (Queue type end point)
asadmin create-jms-resource --restype javax.jms.Queue --property Name=PhysicalQueue jms/MyQueue



11. How to create Thick application clnt?

1. Create Application clnt project.
2. Add clnt side requirements(POJI.class,Cust_excs,POJOs --- bundled into JAR)
3. Copy jndi.properties into run -time class path
4. Add ext jar --- app-serv-rt.jar
5. Write Clnt










